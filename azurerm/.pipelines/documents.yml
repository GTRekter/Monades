trigger:
  branches:
    include:
      - main

pool: mwiah-linux

stages:
- stage: documentation
  displayName: 'Terraform'
  jobs:
    - job: documentation
      displayName: Generate documentation about the module
      steps:
      - checkout: self
        persistCredentials: true
        clean: true

      - script: |
          if ! command -v terraform &> /dev/null; then
            echo "Terraform is not installed. Installing..."
            wget https://releases.hashicorp.com/terraform/1.0.8/terraform_1.0.8_linux_amd64.zip
            unzip terraform_1.0.8_linux_amd64.zip
            rm terraform_1.0.8_linux_amd64.zip
            chmod +x terraform
            mv terraform ~/.local/bin/          
          else
            echo "Terraform is already installed."
          fi
        displayName: 'Check and Install Terraform'

      - script: |
          if ! command -v terraform-doc &> /dev/null; then
            echo "terraform-docs is not installed. Installing..."
            curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
            tar -xzf terraform-docs.tar.gz
            rm terraform-docs.tar.gz
            chmod +x terraform-docs
            mkdir -p ~/.local/bin/
            mv terraform-docs ~/.local/bin/
            echo "Adding terraform-docs to PATH"
            echo "##vso[task.prependpath]$HOME/.local/bin"
          else
            echo "terraform-docs is already installed."
          fi
        displayName: 'Check and Install terraform-docs'

      - script: |
          # Store the list of affected directories in the variable
          base_dir="./networking"
          affected_directories=$(find "$base_dir" -type d -not -path '*example*' | while read -r dir; do
            if [ -n "$(find "$dir" -maxdepth 1 -type f -name "*.tf" -print -quit)" ]; then
              echo "$dir"
            fi
          done)
          
          for module in $affected_directories; do
            echo "Generating README.md for module: $module"
            terraform-docs markdown ./"$module" > ./"$module/README.md"
          done
        displayName: Generate terraform docs and update readme

      - script: |
          terraform fmt -recursive
        displayName: Format Terraform code
        
      - script: |
          git config --global user.email "azurepipelines@microsoft.com"
          git config --global user.name "Azure Pipelines"
          
          git checkout -b readme-update-$(Build.BuildId)
          
          git add .

          if git diff --staged --quiet; then
            echo "No changes detected. Skipping PR creation."
          else
            git commit -m "Update README with terraform-docs"

            git push origin readme-update-$(Build.BuildId)

            PULL_REQUEST_DATA=$(printf '{
              "sourceRefName": "refs/heads/readme-update-%s",
              "targetRefName": "refs/heads/main",
              "title": "Auto-update README with terraform-docs",
              "description": "Automated README update by Azure Pipelines.",
              "isDraft": false
            }' $(Build.BuildId))

            curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $(System.AccessToken)" \
            -d "$PULL_REQUEST_DATA" \
            "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.ID)/pullrequests?api-version=6.0"
          fi
        displayName: 'Commit changes, push to a new branch, and create a PR'
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)