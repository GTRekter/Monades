trigger: none

resources:
  repositories:
    - repository: build-resources
      type: git
      name: Platform/cloud-resources

pool: mwiah-linux

variables:
  - template: variables/dev.yml@build-resources

stages:
- stage: documentation
  displayName: 'Terraform'
  jobs:
    - job: testing
      displayName: testing
      steps:
      - checkout: self
        persistCredentials: true
        clean: true

      - task: AzureKeyVault@1
        displayName: 'Get Key Vault Secrets'
        inputs:
          azureSubscription: 'MWIAHUK-Merlin-Production'
          KeyVaultName: 'kv-mwiahuk-prod-config'
          SecretsFilter: 'bitbucket-ssh-key, bitbucket-ssh-host-key, infracost-api-key'

      - task: CmdLine@2
        inputs:
          script: 'mkdir ~/.ssh/; echo $(bitbucket-ssh-key) | base64 -d >> ~/.ssh/id_rsa; chmod 0600 ~/.ssh/id_rsa; echo $(bitbucket-ssh-host-key) | base64 -d >> ~/.ssh/known_hosts'


      - task: AzureCLI@2
        displayName: 'Plan example and add comment with plan in the PR'
        inputs:
          azureSubscription: ${{ variables.ado_svc_connection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            cd $(Build.SourcesDirectory)

            source_branch=$(System.PullRequest.SourceBranch)
            source_branch=${source_branch#refs/heads/}

            target_branch=$(System.PullRequest.TargetBranch)
            target_branch=${target_branch#refs/heads/}

            git fetch origin
            git checkout -b $target_branch origin/$target_branch
            git checkout -b $source_branch origin/$source_branch

            git diff --name-only "$target_branch" "$source_branch"
            
            affected_directories=()
            # Collect affected directories for each base directory and append to the array
            changes=$(git diff --name-only "$target_branch" "$source_branch" | xargs -I {} dirname {} | grep -v "/example$" | sort -u)
            affected_directories+=($changes)
            affected_directories_unique=$(printf "%s\n" "${affected_directories[@]}" | sort -u | xargs)
            echo "Affected directories: $affected_directories_unique"

            exclude_dirs=(".pipelines")
            for module in $affected_directories_unique; do
              # Skip the module if it's in the exclude list
              if [[ " ${exclude_dirs[@]} " =~ " $module " ]]; then
                  echo "Skipping excluded directory: $module"
                  continue
              fi
              if [ -d "$module/example" ]; then
                echo "Running terraform plan for module: $module"
                terraform -chdir="$module/example" init
                terraform -chdir="$module/example" plan -no-color -out="$plan_file_path"  > tfplan.txt
                if [ $? -ne 0 ]; then
                  error_message="Terraform plan failed. Please check the Terraform configuration."
                  echo "$error_message"
                  echo "##vso[task.logissue type=error]$error_message" 
                  exit 1 
                else
                  echo "Terraform plan succeeded."
                fi

                cat tfplan.txt

                # plan_output=$(sed -n '/Terraform will perform the following actions:/,$p' tfplan.txt | sed '1s/^/```\n/' | sed '$a\```')

                # json_payload=$(jq -n --arg content "$plan_output" \
                #   '{comments: [{parentCommentId: 0, content: $content, commentType: 1}]}')

                # curl -X POST -i -s \
                #   -H "Authorization: Bearer $(System.AccessToken)" \
                #   -H "Content-Type: application/json" \
                #   -d "$json_payload" \
                #   "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.ID)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=6.0"
              else
                warning_message="No 'example' folder found in module: $module"
                echo "$warning_message"
                echo "##vso[task.logissue type=warning]$warning_message" 
              fi
            done